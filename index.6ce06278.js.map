{"mappings":"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","sources":["src/index.js","src/js/gallery.js","src/js/keyword.js","src/js/search-form.js","src/js/pagination-gallery.js"],"sourcesContent":["import app from './js/global/app';\n\napp.currentWebPage = 'home';\n\nconsole.log(\"Current Web Page: \" + app.currentWebPage);\n\nimport './js/gallery';\nimport './js/keyword';\nimport './js/search-form';\nimport './js/pagination-gallery';\nimport './js/footer';\nimport './js/movie-window';\n\nconsole.log(\"Current Home Movies Page: \" + app.currentPage);\n","import app from './global/app';\n\napp.getMoviesTodayTrends = async function (page = app.currentPage) {\n  const galleryULElement = document.getElementById(\n    app.MOVIE_CARDS_PARENT_ELEMENT_ID\n  );\n\n  const movies = await app.api.get(`movie/popular?page=${page}`);\n  const movieCards = await app.showMovieCards(movies);\n\n  galleryULElement.insertAdjacentHTML('afterbegin', movieCards);\n};\n\napp.renderMovieCardHTML = async function (movieId) {\n  const movieObject = await app.api.get('movie/' + movieId);\n  const poster = movieObject.poster_path;\n  const posterUrl = 'https://image.tmdb.org/t/p/w500';\n  const movieGenres = [];\n\n  for (const genre of movieObject.genres) {\n    movieGenres.push(genre.name);\n  }\n  const movieYear = movieObject.release_date.split('-')[0];\n  const title = movieObject.original_title;\n  const votes = movieObject.vote_average;\n  const popularity = movieObject.popularity;\n  const about = movieObject.overview;\n\n  return `\n   <li class = \"movie-card\">\n       <div class=\"movie-thumb\">\n        <img class=\"movie-image\" src=\"${posterUrl}${poster}\" alt=\"Poster image\" loading=\"lazy\" />\n       </div>\n      <div class=\"movie-info\">\n        <p class=\"movie-name\">${title}</p>\n        <p class=\"movie-genres\">${movieGenres} | ${movieYear}</p>\n      </div>\n    </li>`;\n};\n\napp.showMovieCards = async function (moviesArray) {\n  let html = '';\n\n  for (const movie of moviesArray.results) {\n    html += await app.renderMovieCardHTML(movie.id);\n  }\n\n  return html;\n};\n\napp.getMoviesTodayTrends();\n","import app from './global/app';\n\n// app.getMoviesByKeyWord = async function (keyword) {\n//   app.currentKeyword = keyword;\n//   const keyword = await app.api.get('search/keyword?query=${keyword}');\n//   console.log(keyword);\n//   return keyword;\n// };\n\n// app.getMoviesByKeyWord();\n\napp.getMoviesByKeyWord = async function (keyword) {\n  Loading.circle();\n  app.currentKeyword = keyword;\n  const keywordData = await app.api.get(\n    `search/keyword?query=${keyword}&page=${app.currentPage}`\n  );\n  Loading.remove();\n  if (keywordData.total_results > 0) {\n    return keywordData;\n  } else {\n    app.onSearchFailed();\n    return {};\n  }\n\n  Notify.success('Notiflix Test');\n};\n//   app.currentKeyword = keyword;\n\n//   const keywordData = await app.api.get(`search/keyword?query=${keyword}&page${app.currentPage}`);\n\n//   if (keywordData.total_results > 0) {\n//     return keywordData;\n//   } else {\n//     app.onSearchFailed();\n//     throw new Error('No movies found');\n//   }\n// };\n\n// app.getMoviesByKeyWord('keyword');\n","import app from './global/app';\n\nconst formError = document.querySelector('.FormError');\n\napp.onSearchFailed = function () {\n  formError.classList.remove('hidden');\n};\n\napp.onSearchSuccess = function () {\n  formError.classList.add('hidden');\n}\n","import app from './global/app';\n"],"names":["$2vAcg","parcelRequire","$bpxeT","default","getMoviesTodayTrends","$parcel$interopDefault","$2TvXO","mark","_callee","page","galleryULElement","movies","movieCards","_args","arguments","length","currentPage","document","getElementById","MOVIE_CARDS_PARENT_ELEMENT_ID","api","get","concat","_ctx","sent","showMovieCards","insertAdjacentHTML","renderMovieCardHTML","movieId","movieObject","poster","posterUrl","movieGenres","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","genre","movieYear","title","poster_path","undefined","genres","Symbol","iterator","next","done","value","push","name","t0","return","release_date","split","original_title","vote_average","popularity","overview","moviesArray","html","movie","results","id","t1","getMoviesByKeyWord","keyword","keywordData","Loading","circle","currentKeyword","remove","total_results","onSearchFailed","Notify","success","$b20aa1c1a1ad0048$var$formError","querySelector","classList","onSearchSuccess","add","currentWebPage","console","log"],"version":3,"file":"index.6ce06278.js.map"}